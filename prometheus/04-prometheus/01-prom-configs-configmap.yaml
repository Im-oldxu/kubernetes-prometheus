apiVersion: v1
kind: ConfigMap
metadata:
  name: prom-configs
  namespace: kube-prom
data:
  prometheus.yml: |-
    global:
      scrape_interval: 15s
      scrape_timeout:  15s
    
    # 告警地址(填写AlertManager的负载均衡地址即可)
    alerting:
      alertmanagers:
      - static_configs:
        - targets: ["alertmanager-svc:9093"]
    
    # 告警规则文件
    rule_files:
      - "/etc/prometheus/rules/*.yml"

    # 监控主机配置
    scrape_configs:
      - job_name: "kube-nodes"
        metrics_path: "/metrics"
        kubernetes_sd_configs:
        - role: node
        relabel_configs:
        - source_labels: ["__address__"]
          regex: "(.*):10250"
          replacement: "$1:9100"
          target_label: __address__
          action: replace
        - regex: "__meta_kubernetes_node_label_(.*)"
          replacement: "$1"
          action: labelmap

      - job_name: "kube-apiserver"
        metrics_path: "/metrics"
        scheme: https
        kubernetes_sd_configs:
        - role: endpoints
        tls_config:
          insecure_skip_verify: true		# 跳过证书验证
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name]
          regex: default;kubernetes
          action: keep
        # 保留特定标签
        - source_labels: [__meta_kubernetes_namespace]
          target_label: namespace
        - source_labels: [__meta_kubernetes_pod_name]
          target_label: pod_name
        - source_labels: [__meta_kubernetes_service_name]
          target_label: service_name

      - job_name: "kube-controller"
        metrics_path: "/metrics"
        scheme: https
        kubernetes_sd_configs:
        - role: pod
        tls_config:
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_label_component]
          regex: "kube-controller-manager"
          action: keep
        - source_labels: [__address__]
          regex: (.*)
          replacement: $1:10257
          target_label: __address__
          action: replace
        - source_labels: [__meta_kubernetes_namespace]
          target_label: namespace
        - source_labels: [__meta_kubernetes_pod_name]
          target_label: pod_name

      - job_name: "kube-scheduler"
        metrics_path: "/metrics"
        scheme: https
        kubernetes_sd_configs:
        - role: pod
        tls_config:
          insecure_skip_verify: true		# 跳过证书验证
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        
        # 保留实例标签component=kube-scheduler
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_label_component]
          regex: "kube-scheduler"
          action: keep
          
        # 重新修改Pod的IP:port
        - source_labels: [__address__]
          regex: (.*)
          replacement: $1:10259
          target_label: __address__
          action: replace

       # 保留特定标签
        - source_labels: [__meta_kubernetes_namespace]
          target_label: namespace
        - source_labels: [__meta_kubernetes_pod_name]
          target_label: pod_name

      - job_name: "kube-etcd"
        metrics_path: "/metrics"
        scheme: http
        kubernetes_sd_configs:
        - role: pod
        # 保留实例标签component=etcd
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_label_component]
          regex: "etcd"
          action: keep
        # 重新修改Pod的IP:port
        - source_labels: [__address__]
          regex: (.*)
          replacement: $1:2381
          target_label: __address__
          action: replace
       # 保留特定标签
        - source_labels: [__meta_kubernetes_namespace]
          target_label: namespace
        - source_labels: [__meta_kubernetes_pod_name]
          target_label: pod_name

      - job_name: "kube-proxy"
        metrics_path: "/metrics"
        scheme: http
        # 基于pod实现自动发现
        kubernetes_sd_configs:
        - role: pod     
        # 保留实例标签k8s_app=kube-proxy
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_label_k8s_app]
          regex: "kube-proxy"
          action: keep
        # 重新修改Pod的IP:port
        - source_labels: [__meta_kubernetes_pod_ip]
          regex: (.*)
          replacement: $1:10249
          target_label: __address__
          action: replace
       # 保留特定标签
        - source_labels: [__meta_kubernetes_namespace]
          target_label: namespace
        - source_labels: [__meta_kubernetes_pod_name]
          target_label: pod_name

      - job_name: "kube-kubelet"
        metrics_path: "/metrics/cadvisor"
        scheme: https
        # 基于nodes实现自动发现
        kubernetes_sd_configs:
        - role: node
        tls_config:
          insecure_skip_verify: true		# 跳过证书验证
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        # 映射特定标签
        relabel_configs:
        - regex: __meta_kubernetes_node_label_(.*)
          replacement: $1
          action: labelmap

      - job_name: "kube-blackbox-tcp"
        metrics_path: /probe
        params:
          module: [tcp_connect]
        # 基于service自动发现，会抓取所有的service进行TCP探测
        kubernetes_sd_configs:
        - role: service
        relabel_configs:
        - source_labels: [__address__]
          target_label: __param_target
        - source_labels: [__param_target]
          target_label: instance
        - target_label: __address__
          replacement: blackbox-svc:9115
        # 保留特定标签
        - source_labels: [__meta_kubernetes_namespace]
          target_label: namespace
        - source_labels: [__meta_kubernetes_service_name]
          target_label: service_name

      - job_name: "kube-blackbox-http"
        metrics_path: /probe
        params:
          module: [http_2xx]     # 调用http_2xx模块进行探测
        # 基于ingress自动发现所有的域名，然后进行http探测
        kubernetes_sd_configs:
        - role: ingress
        relabel_configs:
        # 协议有可能是http或htps，因此需要根据抓取到的协议来探测目标
        - source_labels: [__meta_kubernetes_ingress_scheme,__address__]
          regex: (.*);(.*)
          replacement: $1://$2
          target_label: __param_target
        - source_labels: [__param_target]
          target_label: instance
        - target_label: __address__
          replacement: blackbox-svc:9115
        # 保留特定标签
        - source_labels: [__meta_kubernetes_namespace]
          target_label: namespace
        - source_labels: [__meta_kubernetes_ingress_name]
          target_label: ingress_name
        - source_labels: [__meta_kubernetes_ingress_class_name]
          target_label: ingress_class_name

      - job_name: 'kube-pods'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        # 保留注解为 prometheus.io/scrape: true 的 Pod实例
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          regex: "true"
          action: keep
        # 将 prometheus.io/scheme 注解获取到的 http 或 https赋予给__scheme__标签 (https?) 其中?表示s可以重复0次或1次
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
          regex: (https?)
          target_label: __scheme__
          action: replace
        # 将 prometheus.io/path 注解获取到的路径，赋予给__metrics_path__标签
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          regex: (.*)
          target_label: __metrics_path__
          action: replace
        # 判断__metrics__path__是否有值，如果没有值，则默认将__metrics_path__标签的值修改为/metrics
        - source_labels: [__metrics_path__]
          regex: ""
          replacement: /metrics
          target_label: __metrics_path__
        # 将 prometheus.io/port 注解获取到的端口，结合__address__的地址，构建出IP:Port
        - source_labels: [__meta_kubernetes_pod_ip, __meta_kubernetes_pod_annotation_prometheus_io_port]
          regex: (.*);(\d+)
          replacement: $1:$2
          target_label: __address__
        # 映射标签集
        - regex: __meta_kubernetes_pod_label_(.*)
          action: labelmap
        # 保留特定标签
        - source_labels: [__meta_kubernetes_namespace]
          target_label: namespace
        - source_labels: [__meta_kubernetes_pod_name]
          target_label: pod_name

      - job_name: 'kube-endpoints'
        kubernetes_sd_configs:
        - role: endpoints
        relabel_configs:
        # 保留注解为 prometheus.io/scrape: true 的 Pod实例
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          regex: "true"
          action: keep
        # 将 prometheus.io/scheme 注解获取到的 http 或 https赋予给__scheme__标签 (https?) 其中?表示s可以重复0次或1次
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          regex: (https?)
          target_label: __scheme__
          action: replace
        # 将 prometheus.io/path 注解获取到的路径，赋予给__metrics_path__标签
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          regex: (.*)
          target_label: __metrics_path__
          action: replace
        # 判断__metrics__path__是否有值，如果没有值，则默认将__metrics_path__标签的值修改为/metrics
        - source_labels: [__metrics_path__]
          regex: ""
          replacement: /metrics
          target_label: __metrics_path__
        # 将 prometheus.io/port 注解获取到的端口，结合pod的IP地址，构建出新的IP:Port
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          regex: (.*):(.*);(\d+)
          replacement: $1:$3
          target_label: __address__
        # 映射标签集
        - regex: __meta_kubernetes_service_label_(.*)
          action: labelmap
        # 保留特定标签
        - source_labels: [__meta_kubernetes_namespace]
          target_label: namespace
        - source_labels: [__meta_kubernetes_pod_name]
          target_label: pod_name
        - source_labels: [__meta_kubernetes_service_name]
          target_label: service_name
